---
description:
globs:
alwaysApply: false
---
# API Design Guidelines

Everly's API follows RESTful design principles with FastAPI implementation.

## API Structure

- Organize API routes by domain in separate router modules under `app/api/`
- Define all route functions with async keyword
- Group related endpoints under the same router
- Include version prefix in the URL (e.g., `/api/v1/diaries`)

## Endpoint Naming

- Use plural nouns for resource collections (e.g., `/diaries`, `/users`)
- Use resource ID for specific items (e.g., `/diaries/{diary_id}`)
- Use kebab-case for URL paths (e.g., `/travel-locations`)
- Use descriptive names for non-CRUD operations (e.g., `/diaries/{diary_id}/analyze-sentiment`)

## HTTP Methods

- Use appropriate HTTP methods:
  - `GET` for retrieving resources
  - `POST` for creating resources
  - `PUT` for full updates
  - `PATCH` for partial updates
  - `DELETE` for deleting resources

## Query Parameters

- Use query parameters for filtering, sorting, and pagination
- Consistent naming: `page`, `limit`, `sort_by`, `order`, `filter_*`
- Default sorting and pagination values in the router definition

## Request Validation

- Define Pydantic models in `app/schemas/` for request/response validation
- Use path parameters for resource identification
- Validate all incoming data with Pydantic models

## Response Format

- Consistent response format:
  ```json
  {
    "status": "success",
    "data": { ... },
    "message": "Optional message"
  }
  ```
  
- Error response format:
  ```json
  {
    "status": "error",
    "code": "ERROR_CODE",
    "message": "Human readable error message",
    "details": { ... }
  }
  ```

- Use appropriate HTTP status codes:
  - 200: Success
  - 201: Created
  - 204: No Content
  - 400: Bad Request
  - 401: Unauthorized
  - 403: Forbidden
  - 404: Not Found
  - 422: Validation Error
  - 500: Internal Server Error

## Authentication

- Use OAuth2 with Google authentication
- JWT tokens for session management
- Include auth middleware in the application
- Define permission levels in the routes

## Documentation

- Include detailed docstrings for all API endpoints
- Use FastAPI's automatic OpenAPI documentation
- Document examples for request/response
- Include security requirements in the endpoint decorators
