---
description:
globs:
alwaysApply: false
---
# Database Models Guidelines

Everly uses MongoDB as the primary database with MongoEngine ODM (Object-Document Mapper) for Python.

## Model Definition

- Define all models in the `app/db/models/` directory
- Use separate files for different domain models
- Import all models in `app/db/models/__init__.py` for easy access

## MongoEngine Conventions

- All models should inherit from `mongoengine.Document` or `mongoengine.EmbeddedDocument`
- Use descriptive field names that match the API schema fields when possible
- Always define a meta class with the collection name

```python
from mongoengine import Document, StringField, DateTimeField, EmbeddedDocument
import datetime

class DiaryEntry(Document):
    title = StringField(required=True, max_length=200)
    content = StringField(required=True)
    created_at = DateTimeField(default=datetime.datetime.utcnow)
    user_id = StringField(required=True)
    sentiment_score = FloatField()
    
    meta = {
        'collection': 'diary_entries',
        'indexes': [
            'user_id',
            ('user_id', '-created_at')
        ]
    }
```

## Indexing

- Define appropriate indexes in the model's meta class
- Create compound indexes for frequent query patterns
- Consider creating TTL indexes for temporary data

## Field Validation

- Use field validation parameters (min_length, max_length, etc.)
- Define custom validation using `clean()` methods when needed
- Use `validate()` before saving documents

## Relationships

- Use `ReferenceField` for relationships between documents
- Use `EmbeddedDocumentField` for nested documents
- Consider using `ListField` with `ReferenceField` for one-to-many relationships

## Timestamps

- Include `created_at` and `updated_at` fields in all documents for auditing
- Use default values for timestamp fields

## Document Migration Strategy

- Design models with future schema migrations in mind
- Document version fields when appropriate
- Use alembic for tracking and applying migrations
