# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- Google OAuth認證時，redirect_uri必須完全匹配Google Cloud Console中配置的重定向URI，包括協議(http/https)、大小寫和尾部斜線。不匹配會導致401錯誤。
- 在多平台OAuth認證中，移動應用（如iOS）與後端服務器使用的OAuth客戶端可能不兼容。iOS應用通常只有客戶端ID而無客戶端密鑰，最佳實踐是讓移動端完成完整OAuth流程並將訪問令牌傳給後端，而非傳遞授權碼。

# Scratchpad

## Task: Google OAuth認證問題排查

用戶遇到了Google OAuth認證失敗的問題，顯示401 Unauthorized錯誤。

### 問題分析:
[X] 查看錯誤日誌
[X] 檢查OAuth配置相關代碼
[X] 檢查環境變數配置
[X] 了解Google OAuth常見錯誤原因
[X] 提出解決方案
[X] 實施解決方案

### 發現:
1. 在嘗試用授權碼換取令牌時出現401 Unauthorized錯誤
2. .env中已配置Google OAuth相關憑據
3. 問題根本原因：iOS應用使用Google OAuth客戶端ID獲取授權碼，而後端使用不同的OAuth客戶端（帶密鑰）嘗試交換令牌

### 解決方案:
1. 修改認證流程，改為iOS應用完成完整的OAuth流程（包括獲取訪問令牌）
2. 後端接受Google訪問令牌而非授權碼
3. 更新相關API端點和文檔

### 實施步驟:
[X] 修改 app/schemas/auth.py 中的 GoogleAuthRequest 模型，改為接受訪問令牌而非授權碼
[X] 修改 app/api/v1/endpoints/auth.py 中的 login_with_google 端點，改為直接驗證訪問令牌
[X] 優化 app/services/auth.py 中的 verify_google_token 函數，刪除不再需要的 exchange_code_for_token 函數
[X] 更新前端開發者文檔，說明新的認證流程

## Task: Generate Technical Documentation for Frontend Developers

The user needs comprehensive technical documentation in English for frontend developers who will be interacting with the Everly backend API.

### Plan:
[X] Analyze the current codebase structure
[X] Create a comprehensive API documentation file
[X] Document all available endpoints and their functionality
[X] Provide request/response examples
[X] Document authentication flow
[X] Provide implementation guidelines
[X] Add technical architecture overview

### Progress:
I have successfully created three detailed documentation files:

1. docs/frontend-guide.md - Complete API reference with examples of request/response formats
2. docs/architecture.md - Technical architecture overview with system diagrams
3. docs/integration-guide.md - Step-by-step guide for frontend developers including code examples

These documents cover all the major aspects of the Everly backend that frontend developers need to understand:
- Authentication flows
- API endpoints and parameters
- Data models
- Error handling
- Implementation examples
- Best practices
- Troubleshooting guidance

