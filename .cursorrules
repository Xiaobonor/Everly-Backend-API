# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- Google OAuth認證時，redirect_uri必須完全匹配Google Cloud Console中配置的重定向URI，包括協議(http/https)、大小寫和尾部斜線。不匹配會導致401錯誤。
- 在多平台OAuth認證中，移動應用（如iOS）與後端服務器使用的OAuth客戶端可能不兼容。iOS應用通常只有客戶端ID而無客戶端密鑰，最佳實踐是讓移動端完成完整OAuth流程並將訪問令牌傳給後端，而非傳遞授權碼。
- 在Pydantic模型中，使用`Field`類為字段添加詳細的描述和驗證規則，例如`Field(None, description="User interface language preference")`
- 存儲用戶偏好設置時，使用字典（MongoDB中的DictField）比列表更靈活，便於添加和更新各種設置而不影響現有數據
- 在數據模型結構變更後，需要處理現有數據的遷移問題。例如，將MongoDB中的ListField改為DictField時，需要添加遷移代碼將現有列表數據轉換為字典格式，避免ValidationError
- 在使用FastAPI處理文件上傳功能時，需要安裝python-multipart套件，否則會出現'Form data requires "python-multipart" to be installed'的錯誤
- 若要通過FastAPI提供靜態文件訪問（如上傳的圖片），需要使用app.mount("/static", StaticFiles(directory="static"), name="static")掛載靜態目錄，並確保相應的目錄結構存在
- 處理文件上傳時，FastAPI不直接支持設置最大文件大小限制，需要使用Starlette中間件來實現。最佳實踐是創建自定義中間件類繼承BaseHTTPMiddleware，檢查請求的Content-Length標頭
- 處理二進制文件時，應避免將其當作文本處理，以防出現UnicodeDecodeError。使用`with open(file_path, "wb") as f`或`async with aiofiles.open(file_path, "wb") as f`確保以二進制模式讀寫文件
- 在異步處理上傳文件時，可以使用content = await file.read()獲取文件內容，然後用await out_file.write(content)將內容寫入目標文件，確保正確處理大文件而不阻塞事件循環
- 當API響應中包含二進制數據時，不要直接返回二進制數據，而應該將其轉換為Base64編碼的字符串。在Python中可以使用`base64.b64encode(binary_data).decode('ascii')`進行轉換
- FastAPI的jsonable_encoder會嘗試將bytes類型自動以UTF-8編碼解碼為字符串，這可能導致UnicodeDecodeError。處理二進制數據時，應該在返回前將其轉換為Base64或處理為適當的格式
- 在處理可能包含各種數據類型（包括二進制數據）的用戶輸入時，應該添加專門的UnicodeDecodeError異常處理，並在全局異常處理器中加入對此類錯誤的處理
- 當客戶端提交二進制數據到偏好設定API時，需要在應用程序的多個層面進行處理：1)在Pydantic模型中檢測並轉換bytes類型；2)在API端點處理函數中添加專門的異常處理；3)在全局異常處理中提供明確的錯誤信息
- 在FastAPI應用中添加請求日誌中間件可以提供更全面的請求追踪。通過繼承BaseHTTPMiddleware類，可以記錄請求開始和結束時間、請求方法、路徑、處理時間和結果。這有助於性能監控和故障排除。
- 在Python日誌記錄中，使用`exc_info=True`參數記錄異常時可以捕獲完整的堆棧跟踪，這對於調試生產環境中的錯誤非常有用。

# Scratchpad

## Task: 增加更多的日誌記錄到API端點

### 問題分析：
[X] 分析項目結構，確定API端點的實現位置
[X] 檢查現有的日誌設置和記錄模式
[X] 規劃在API端點中添加詳細日誌記錄的方式

### 解決方案：
[X] 修改users.py文件，為所有用戶相關API端點添加詳細日誌
[X] 修改auth.py文件，為認證相關API端點添加詳細日誌
[X] 修改diaries.py文件，為日記相關API端點添加詳細日誌
[X] 修改media.py文件，為媒體上傳API端點添加詳細日誌
[X] 在app/main.py中添加請求日誌中間件，記錄每個HTTP請求的詳細信息

### 實施的修改：
1. 在用戶API端點(app/api/v1/endpoints/users.py)中：
   - 在每個API端點開始時記錄請求信息
   - 在處理過程中記錄關鍵步驟
   - 在請求結束時記錄完成信息
   - 詳細記錄異常和錯誤

2. 在認證API端點(app/api/v1/endpoints/auth.py)中：
   - 將所有日誌訊息改為繁體中文
   - 添加更詳細的認證過程記錄
   - 改進錯誤和異常記錄

3. 在日記API端點(app/api/v1/endpoints/diaries.py)中：
   - 為所有日記和日記條目操作添加詳細日誌
   - 記錄數據庫操作和結果
   - 改進異常處理和錯誤記錄

4. 在媒體API端點(app/api/v1/endpoints/media.py)中：
   - 記錄媒體文件上傳的詳細信息
   - 改進錯誤處理和日誌記錄

5. 在主應用模塊(app/main.py)中：
   - 添加請求日誌中間件，記錄所有HTTP請求
   - 記錄請求開始時間、處理時間和完成狀態
   - 為大小限制中間件添加更詳細的日誌
   - 改進全局異常處理器的日誌記錄
   - 改進應用程序啟動和關閉事件的日誌記錄

### 成果：
- 所有API端點現在都有詳細的日誌記錄，包括請求開始、處理過程和完成時的記錄
- 添加了一個全局請求日誌中間件，記錄每個HTTP請求的詳細信息
- 改進了錯誤和異常的日誌記錄，更容易診斷問題
- 所有日誌都使用繁體中文，更容易理解和分析
- 添加了請求ID以便於追踪整個請求流程

## Task: Generate Technical Documentation for Frontend Developers

The user needs comprehensive technical documentation in English for frontend developers who will be interacting with the Everly backend API.

### Plan:
[X] Analyze the current codebase structure
[X] Create a comprehensive API documentation file
[X] Document all available endpoints and their functionality
[X] Provide request/response examples
[X] Document authentication flow
[X] Provide implementation guidelines
[X] Add technical architecture overview

### Progress:
I have successfully created three detailed documentation files:

1. docs/frontend-guide.md - Complete API reference with examples of request/response formats
2. docs/architecture.md - Technical architecture overview with system diagrams
3. docs/integration-guide.md - Step-by-step guide for frontend developers including code examples

These documents cover all the major aspects of the Everly backend that frontend developers need to understand:
- Authentication flows
- API endpoints and parameters
- Data models
- Error handling
- Implementation examples
- Best practices
- Troubleshooting guidance

